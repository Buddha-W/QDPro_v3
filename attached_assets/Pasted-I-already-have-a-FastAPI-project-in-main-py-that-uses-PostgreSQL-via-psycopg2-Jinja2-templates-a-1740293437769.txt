I already have a FastAPI project in main.py that uses PostgreSQL (via psycopg2), Jinja2 templates, and static files. I need to add a new feature that mimics a "File > New" action (as seen in ESS) to create a new Location. This feature will use a single PostgreSQL database with logical separation via a "locations" table and a "records" table.

Please modify my existing main.py (see below) by adding the following features, ensuring that when I click "File > New" in the UI, it will open a pop-up (or navigate to a page) that lets me create a new Location:

1. **Database Initialization**:
   - Add a function called `init_db()` that creates two tables (if they do not exist):
     - A "locations" table with columns:
       - `id` (SERIAL PRIMARY KEY)
       - `location_name` (TEXT NOT NULL)
       - `created_at` (TIMESTAMP NOT NULL DEFAULT NOW())
     - A "records" table with columns:
       - `id` (SERIAL PRIMARY KEY)
       - `location_id` (INTEGER NOT NULL REFERENCES locations(id))
       - `info` (TEXT)
       - `created_at` (TIMESTAMP NOT NULL DEFAULT NOW())
   - Also create an index on `records(location_id)` for performance.

2. **UI Routes and Templates**:
   - Add a route `/ui/locations` (GET) that lists all existing locations from the "locations" table.
   - Add a route `/ui/create_location` (GET and POST) that displays a form (or pop-up) to create a new location and handles form submission to insert a new location into the "locations" table.
   - Add a route `/ui/open_location/{location_id}` (GET) that shows the details of a specific location (its name, creation time) and lists its records from the "records" table.
   - Add a route `/ui/open_location/{location_id}/add_record` (POST) that accepts a form submission to add a new record (with a text field "info") for that location.
   - The templates should be simple Jinja2 templates located in `static/templates/`. Create two templates:
     - `locations.html` for listing locations and displaying the "create new location" form.
     - `open_location.html` for displaying a specific locationâ€™s details and its records, with a form to add new records.
   - Ensure the UI includes a "File > New" menu item or button. When clicked, it should trigger the "create new location" action (by opening the form or navigating to `/ui/create_location`).

3. **Integration with Existing Code**:
   - Ensure that the new code works together with the existing FastAPI endpoints (for example, keep your existing routes like "/" and "/api/save-layers").
   - Call `init_db()` once at startup (after creating the FastAPI app).
   - Use the environment variable `DATABASE_URL` for PostgreSQL connections (as in the existing code).

4. **Requirements**:
   - Use FastAPI, psycopg2, and Jinja2 templates as in my current project.
   - Make sure the new endpoints do not interfere with the existing code.
   - Return complete, working code for main.py that integrates these new features.
   - Do not include non-functional or pseudo-code; ensure the code is as self-contained as possible so I don't have to fix it manually.

Here is my current main.py code:

----------------------------------------------------
from fastapi import FastAPI, Request, Depends, HTTPException, status
import json
import os
import os.path
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware

app = FastAPI()

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

from auth import get_current_user

# Ensure data directory exists
DATA_DIR = os.path.join(os.path.expanduser('~'), "data")
os.makedirs(DATA_DIR, exist_ok=True)

app.mount("/static", StaticFiles(directory="static"), name="static")

templates = Jinja2Templates(directory="static/templates")


@app.get("/")
async def render_web_page(request: Request):
    """Render main web page with user context if applicable."""
    try:
        current_user = await get_current_user(
            request.headers.get("Authorization"))
    except HTTPException as http_exc:
        current_user = None
        if http_exc.status_code != status.HTTP_401_UNAUTHORIZED:
            print(f"Auth error: {http_exc}")

    try:
        return templates.TemplateResponse(
            "site_plan.html", {
                "request": request,
                "authenticated": current_user is not None,
                "username": current_user if current_user else None
            })
    except Exception as e:
        print(f"Template error: {e}")
        return JSONResponse(content={"error": "Failed to load template"},
                            status_code=500)

    return templates.TemplateResponse(
        "site_plan.html", {
            "request": request,
            "authenticated": current_user is not None,
            "username": current_user if current_user else None
        })


@app.get("/reports/facilities")
async def return_facilities_report():
    """Provide report on facilities."""
    facilities = [{
        "id": 1,
        "name": "Facility A",
        "lat": 40.7128,
        "lng": -74.0060
    }, {
        "id": 2,
        "name": "Facility B",
        "lat": 34.0522,
        "lng": -118.2437
    }]
    return JSONResponse(content=facilities,
                        headers={"Content-Type": "application/json"})


@app.post("/api/save-layers")
async def save_layers(request: Request):
    data = await request.json()
    try:
        import psycopg2
        conn = psycopg2.connect(os.environ['DATABASE_URL'])
        cur = conn.cursor()

        # Ensure data is in correct format
        if not isinstance(data, dict):
            data = {"layers": data}
        elif "layers" not in data:
            data = {"layers": data}

        for layer_name, layer_data in data['layers'].items():
            # Save layer properties
            cur.execute(
                """
                INSERT INTO map_layers (name, layer_config, is_active)
                VALUES (%s, %s, %s)
                ON CONFLICT ON CONSTRAINT map_layers_name_key DO UPDATE 
                SET layer_config = EXCLUDED.layer_config
            """, (layer_name, json.dumps(layer_data['properties']), True))

            # Save features as analysis results
            if layer_data.get('features'):
                for feature in layer_data['features']:
                    cur.execute(
                        """
                        INSERT INTO analysis_results 
                        (analysis_type, result_geometry, result_data)
                        VALUES (%s, ST_GeomFromGeoJSON(%s), %s)
                    """, (layer_name, json.dumps(feature['geometry']),
                          json.dumps(feature.get('properties', {}))))

        conn.commit()
        return JSONResponse(content={
            "status": "success",
            "message": "Data saved to database"
        })
    except Exception as e:
        import traceback
        error_details = traceback.format_exc()
        print(f"Error saving layers: {error_details}")
        raise HTTPException(
            status_code=500,
            detail=f"Failed to save: {str(e)}\n{error_details}")
    finally:
        if 'cur' in locals(): cur.close()
        if 'conn' in locals(): conn.close()


@app.get("/api/load-layers")
async def load_layers():
    try:
        import psycopg2
        conn = psycopg2.connect(os.environ['DATABASE_URL'])
        cur = conn.cursor()

        layers = {}

        # Load layer configurations
        cur.execute(
            "SELECT name, layer_config FROM map_layers WHERE is_active = true")
        for name, config in cur.fetchall():
            layers[name] = {
                "properties":
                config if isinstance(config, dict) else json.loads(config),
                "features": []
            }

        # Load features for each layer
        for layer_name in layers:
            cur.execute(
                """
                SELECT ST_AsGeoJSON(result_geometry), result_data 
                FROM analysis_results 
                WHERE analysis_type = %s
            """, (layer_name, ))

            for geom, properties in cur.fetchall():
                layers[layer_name]["features"].append({
                    "type":
                    "Feature",
                    "geometry":
                    json.loads(geom),
                    "properties":
                    properties
                    if isinstance(properties, dict) else json.loads(properties)
                })

        return JSONResponse(content={"layers": layers},
                            headers={"Content-Type": "application/json"})
    except Exception as e:
        import traceback
        error_details = traceback.format_exc()
        print(f"Error loading layers: {error_details}")  # Debug log
        return JSONResponse(content={
            "layers": {},
            "error": str(e)
        },
                            headers={"Content-Type": "application/json"},
                            status_code=500)


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=3000, reload=True)
----------------------------------------------------

Please return the full modified main.py code including:
- The `init_db()` function that creates the "locations" and "records" tables.
- New endpoints for:
  - `/ui/locations` (GET) to list all locations.
  - `/ui/create_location` (GET and POST) to display a form (or pop-up) and create a new location.
  - `/ui/open_location/{location_id}` (GET) to display a location's details and its records.
  - `/ui/open_location/{location_id}/add_record` (POST) to add a new record for that location.
- Include instructions/comments for simple Jinja2 templates (`locations.html` and `open_location.html`).
- Ensure that the "File > New" action in the UI triggers the creation of a new location (for example, by linking a menu button to `/ui/create_location`).
- Make the code as self-contained as possible so that I don't have to fix it manually.
